package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate p;
    private DbIterator child1;
    private DbIterator child2;
    private TupleDesc tupleDesc1;
    private TupleDesc tupleDesc2;
    private int field1,field2;
    private ArrayList<Tuple> tuples;
    private Iterator<Tuple> it;
    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
        this.p = p;
        this.child1 = child1;
        this.child2 = child2;
        this.tupleDesc1 = this.child1.getTupleDesc();
        this.tupleDesc2 = this.child2.getTupleDesc();
        this.field1 = p.getField1();
        this.field2 = p.getField2();
        this.tuples = new ArrayList<>();
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return this.p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        return this.tupleDesc1.getFieldName(field1);
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        return this.tupleDesc2.getFieldName(field2);
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return TupleDesc.merge(this.tupleDesc1, this.tupleDesc2);
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        this.child1.open();
        this.child2.open();
        while(child1.hasNext()){
            Tuple t1 = child1.next();
            while (child2.hasNext()){
                Tuple t2 = child2.next();
                if(p.filter(t1, t2)){
                    TupleDesc tDesc = TupleDesc.merge(t1.getTupleDesc(), t2.getTupleDesc());
                    Tuple t = new Tuple(tDesc);
                    int i = 0, j = 0;
                    for(; i<t1.getTupleDesc().numFields(); i++){
                        t.setField(i, t1.getField(i));
                    }
                    for(; j<t2.getTupleDesc().numFields(); j++){
                        t.setField(i, t2.getField(j));
                        i++;
                    }

                    tuples.add(t);
                }
            }

            child2.rewind();
        }

        it = tuples.iterator();
        super.open();
    }

    public void close() {
        // some code goes here
        child2.close();
        child1.close();
        super.close();
        it = null;
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        it = tuples.iterator();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        if(it != null && it.hasNext()){
            return it.next();
        }else{
            return null;
        }
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        return new DbIterator[] {child1, child2};
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
        if(child1 != children[0]){
            child1 = children[0];
        }else{
            child1 = null;
        }
        if(child2 != children[1]){
            child2 = children[1];
        }else {
            child2 = null;
        }
    }

}
